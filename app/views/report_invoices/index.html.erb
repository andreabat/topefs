<%= javascript_include_tag "invoice.js" %>
<%= javascript_include_tag "miframe.js" %>
<div id="invoice-grid"></div>
<script type="text/javascript">
//<![CDATA[
function add_tab(x,y){

	parent.add_tab(x,y)
}
          var invoice_datastore = new Ext.data.Store({
                  proxy: new Ext.data.HttpProxy({
                             url: '/report_invoices/index?format=ext_json',
							  baseParams:{year:<%=@year%>},
                             method: 'GET'
                         }),
                  reader: new Ext.data.JsonReader({
                              root: 'invoices',
                              id: 'id',
                              totalProperty: 'results'
                          },
                          [ {name: 'id', mapping: 'id'},
						     {name:"invoice[code]",mapping:'code'},
							 {name:"invoice[payed]",mapping:'payed',type:'boolean'},
						  	{name:"invoice[login]",mapping:'user.login'},
							{name: 'invoice[paymentmethod]', mapping: 'paymentmethod.paymentmethod'},
							{name: 'invoice[imponibile]', mapping: 'euro_imponibile'},
							{name: 'invoice[iva]', mapping: 'euro_iva'},
							{name: 'invoice[total]', mapping: 'euro_total'},
							{name: 'invoice[customer]', mapping: 'customer'},
							{name: 'invoice[job]', mapping: 'project.code'},
							{name: 'invoice[title]', mapping: 'title'},
							{name:"invoice[expiration]",mapping:'expiration'},
							{name:"invoice[expired]",mapping:'expired'},
							{name:"invoice[payed_date]",mapping:'payed_date'},
							{name: 'invoice[project_id]', mapping: 'project_id'},
							{name: 'invoice[user_id]', mapping: 'user_id'},
							{name: 'invoice[pricing_id]', mapping: 'pricing_id'},
							{name: 'invoice[deleted]', mapping: 'deleted'},
							{name:"invoice[document_id]",mapping:'document_id'},
							{name: 'invoice[created_at]', mapping: 'created_at'},
							{name: 'invoice[updated_at]', mapping: 'updated_at'} 
						]),
                  // turn on remote sorting
                  remoteSort: true,
                  sortInfo: {field: 'id', direction: 'asc'}
              });

function budget_renderer(a,b,r){
	return String.format("<a href='#' onclick='parent.add_tab(\"/budgets/edit/{0}\",\"{1} {0}\",\"icon_book\")'>{2}</a>" ,r.get("invoice[budget_id]"),'<%=:a_edit.l << " " << :l_budget.localize%>', r.get("invoice[budget]") );
}

function annullabile(d,b,r){
	if(d==true){
		return "Annullata"
	}else
	{
		if (r.get("invoice[payed]")==true){
			return "Non annullabile"
		}
		else
			return "<a href='#' onclick='annulla(" + r.get("id") +")'>Annulla</a>"
	}
	
}
function annulla(id){
	Ext.Msg.confirm("Annulla una fattura","Si è sicuri che si vuole annullare la fattura ?",
			function(v){
				if (v=="ok"){
					alert("Funzionalità non implementata");
				}
				
			}
	)
}
//]]>
</script>
<% javascript_tag do -%>
  var invoice_column_model = new Ext.grid.ColumnModel([
    {id: 'sh', header: "Visualizza", renderer:function(a,b,r){return r.get("invoice[document_id]")?"<a target='_blank' href='/documents/show/" + r.get("invoice[document_id]") + "'>visualizza</a>":""}
	},
	 {id: 'df', header: "Dettaglio",  renderer:function(a,b,r){ return "<a  href='#' onclick='show_proceeds(" + r.get("id") + ",\"" + r.get("invoice[code]") +"\")'>pagamenti</a>"}
	},
	{id: 'id', header: "Nr.",   dataIndex: 'invoice[code]'},
	{header: 'Data Fattura', dataIndex: 'invoice[created_at]',renderer:function(a){return  Ext.util.Format.dateRenderer('d/m/Y')(Date.parseDate(a,'Y-m-d\\TH:i:sP'))}},
	{id: 'id', header: "Job Nr.",   dataIndex: 'invoice[job]'},
	{id: 'id', header: "Cliente", dataIndex: 'invoice[customer]'},
	{id: 'id', header: "Oggetto", dataIndex: 'invoice[title]'},
	{id: 'id', header: "Imponibile", dataIndex: 'invoice[imponibile]',align:"right"},
	{id: 'id', header: "IVA", dataIndex: 'invoice[iva]',align:"right"},
	{id: 'id', header: "Totale", dataIndex: 'invoice[total]',align:"right"},
	
	{id: 'id', header: "Condizioni", dataIndex: 'invoice[paymentmethod]'},
	{header: 'Scadenza', dataIndex: 'invoice[expiration]',renderer: function(a)
															{
																var dt = Date.parseDate(a,'Y-m-d');
																return  Ext.util.Format.dateRenderer('d/m/Y')(dt)
															}},
	{id: 'payed', header: "Status",   dataIndex: 'invoice[payed]',
		renderer:function(v,a,r){
     		var ret =""
			if (r.get("invoice[expired]")&&r.get("invoice[payed]")!=true)
				ret ="Scaduta<br>"
			else
				ret ="Non scaduta<br>"
			
			if(v)
				ret += " Pagata" 
			else 
				ret += " NON Pagata" 
				
				return ret
				}},
    
    {header: 'Data Pagamento', dataIndex: 'invoice[payed_date]',renderer:function(a){return  Ext.util.Format.dateRenderer('d/m/Y')(Date.parseDate(a,'Y-m-d'))}}
	
	
  ]);
 
<% end -%>
<script type="text/javascript">
//<![CDATA[
          Ext.onReady(function(){

//             Ext.state.Manager.setProvider(new Ext.state.CookieProvider());
              Ext.QuickTips.init();

              var ds = invoice_datastore;

              var cm = invoice_column_model;
              cm.defaultSortable = true;

              // create the grid
              var grid = new Ext.grid.GridPanel({
                  ds: ds,
                  cm: cm,
				  collapsible:true,
                  loadMask:true,
                  sm: new Ext.grid.RowSelectionModel({singleSelect:true}),
                  renderTo:   'invoice-grid',
                  title:      '<%= :listing.l + " " +  :l_invoices.l%>',
                  id:         null,
                  width:      getViewPort(5).width,
                  height:     getViewPort(5).height,
                  stripeRows: true,
                  viewConfig: {
                      forceFit:false
                  },

                  // inline toolbars
                  tbar: new Ext.Toolbar({
				  	items:[
								 {text:"Stampa elenco",handler:function(){
									 window.open("index?format=odt&year=<%=@year%>")
									 
									 
								}},
								"-",
								"Anno:",
								{
									xtype:"textfield",
									width:50,
									id:"_anno",
									value:"<%=@year%>"
								},
								{
									xtype:"button",
									text:"cambia",
									handler:function(){
										document.location="index?year=" + Ext.getCmp("_anno").getValue();									
									}
								}
					]
					
				  }),
                  bbar: new Ext.PagingToolbar({
                            pageSize: <%=@default_grid_page_size%>,
                            store: ds,
                            displayInfo: true,
                            displayMsg: 'Record {0} - {1} of {2}',
                            emptyMsg: 'Nessun record trovato.'
                  })
                  
              });

//			  grid.on("rowdblclick",function(a,b,c){
//			  	show_proceeds(a.getStore().getAt(b).get("id"),a.getStore().getAt(b).get("invoice[code]"));
//			  })
			  
              ds.baseParams={year:'<%=@year%>',fields:'',query:'',project_id:'<%=params[:project_id]%>'<%=',invoiceid:'+params[:invoiceid] if params[:invoiceid]%>}
              ds.load({
                          params: { 
                                    start: 0, 
                                    limit: <%=@default_grid_page_size%>,
                                    fields:'',
									year:'<%=@year%>',
                                    query:''
                                    
                                    }
                        });

          });

//]]>
</script>
<br>
<div class="x-window-body">
        <div id="info-hotspot"></div>
		<div id="show-proceeds">
        </div>
	</div>


<div id="proceeds-win" class="x-hidden">
    <div class="x-window-header">
      Elenco Incassi per la Fattura #
    </div>
    <div class="x-window-body">
        <div id="show-proceeds">
        </div>
	</div>
</div>